{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "98064576-7a44-4ae4-9281-ab41ce4f4464",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gymnasium as gym\n",
    "from gymnasium import spaces\n",
    "import numpy as np\n",
    "from scipy.integrate import solve_ivp\n",
    "import os\n",
    "\n",
    "class UnbalancedDisk(gym.Env):\n",
    "    metadata = {\"render_modes\": [\"human\"], \"render_fps\": 24}\n",
    "\n",
    "    def __init__(self, umax=3.0, dt=0.025, render_mode='human'):\n",
    "        # Physics constants (do not modify)\n",
    "        self.omega0 = 11.339846957335382\n",
    "        self.delta_th = 0\n",
    "        self.gamma = 1.3328339309394384\n",
    "        self.Ku = 28.136158407237073\n",
    "        self.Fc = 6.062729509386865\n",
    "        self.coulomb_omega = 0.001\n",
    "\n",
    "        # Control & simulation settings\n",
    "        self.umax = umax\n",
    "        self.dt = dt\n",
    "        self.render_mode = render_mode\n",
    "        self.viewer = None\n",
    "        self.u = 0\n",
    "\n",
    "        # Discrete action space: [-3, -1, 0, 1, 3]\n",
    "        self.action_space = spaces.Discrete(5)\n",
    "\n",
    "        # Observation space: [theta, omega]\n",
    "        low = np.array([-2 * np.pi, -40], dtype=np.float32)\n",
    "        high = np.array([2 * np.pi, 40], dtype=np.float32)\n",
    "        self.observation_space = spaces.Box(low=low, high=high, dtype=np.float32)\n",
    "\n",
    "        # Reward function\n",
    "        self.reward_fun = lambda self: -((self.th % (2 * np.pi) - np.pi) ** 2 + 0.1 * self.omega ** 2 + 0.001 * self.u ** 2)\n",
    "        #self.reward_fun = lambda self:  1 - abs(self.th-np.pi)/np.pi - 0.1*abs(self.omega)\n",
    "        self.reset()\n",
    "\n",
    "    def step(self, action):\n",
    "        self.u = [-3, -1, 0, 1, 3][action]\n",
    "        self.u = np.clip(self.u, -self.umax, self.umax)\n",
    "\n",
    "        def f(t, y):\n",
    "            th, omega = y\n",
    "            dthdt = omega\n",
    "            friction = self.gamma * omega + self.Fc * np.tanh(omega / self.coulomb_omega)\n",
    "            domegadt = -self.omega0 ** 2 * np.sin(th + self.delta_th) - friction + self.Ku * self.u\n",
    "            return np.array([dthdt, domegadt])\n",
    "\n",
    "        sol = solve_ivp(f, [0, self.dt], [self.th, self.omega])\n",
    "        self.th, self.omega = sol.y[:, -1]\n",
    "\n",
    "        reward = self.reward_fun(self)\n",
    "        return self.get_obs(), reward, False, False, {}\n",
    "\n",
    "    def reset(self, seed=None, options=None):\n",
    "        super().reset(seed=seed)\n",
    "        self.th = np.random.normal(loc=0, scale=0.001)\n",
    "        self.omega = np.random.normal(loc=0, scale=0.001)\n",
    "        self.u = 0\n",
    "        return self.get_obs(), {}\n",
    "\n",
    "    def get_obs(self):\n",
    "        th_noise = self.th + np.random.normal(loc=0, scale=0.001)\n",
    "        omega_noise = self.omega + np.random.normal(loc=0, scale=0.001)\n",
    "        return np.array([th_noise, omega_noise], dtype=np.float32)\n",
    "\n",
    "    def render(self):\n",
    "        import pygame\n",
    "        from pygame import gfxdraw\n",
    "        from math import sin, cos\n",
    "\n",
    "        screen_width = 500\n",
    "        screen_height = 500\n",
    "\n",
    "        if self.viewer is None:\n",
    "            pygame.init()\n",
    "            pygame.display.init()\n",
    "            self.viewer = pygame.display.set_mode((screen_width, screen_height))\n",
    "\n",
    "            # Try loading the image\n",
    "            try:\n",
    "                fname = os.path.join(os.path.dirname(__file__), \"clockwise.png\")\n",
    "                self.arrow = pygame.image.load(fname)\n",
    "            except Exception:\n",
    "                self.arrow = None\n",
    "\n",
    "        self.surf = pygame.Surface((screen_width, screen_height))\n",
    "        self.surf.fill((255, 255, 255))\n",
    "\n",
    "        # Draw base disks\n",
    "        center = (screen_width // 2, screen_height // 2)\n",
    "        r_disk = int(screen_width / 2 * 0.65 * 1.3)\n",
    "        r_center = int(screen_width / 2 * 0.06 * 1.3)\n",
    "        gfxdraw.filled_circle(self.surf, *center, r_disk, (32, 60, 92))\n",
    "        gfxdraw.filled_circle(self.surf, *center, r_center, (132, 132, 126))\n",
    "\n",
    "        # Offset disk\n",
    "        r_offset = screen_width // 2 * 0.40 * 1.3\n",
    "        x = int(center[0] - sin(self.th) * r_offset)\n",
    "        y = int(center[1] - cos(self.th) * r_offset)\n",
    "        r_weight = int(screen_width / 2 * 0.22 * 1.3)\n",
    "        r_nut = int(screen_width / 2 * 0.22 / 8 * 1.3)\n",
    "        gfxdraw.filled_circle(self.surf, x, y, r_weight, (155, 140, 108))\n",
    "        gfxdraw.filled_circle(self.surf, x, y, r_nut, (71, 63, 48))\n",
    "\n",
    "        # Flip and draw\n",
    "        self.surf = pygame.transform.flip(self.surf, False, True)\n",
    "        self.viewer.blit(self.surf, (0, 0))\n",
    "\n",
    "        # Draw arrow\n",
    "        if self.u and self.arrow:\n",
    "            arrow_size = abs(float(self.u) / self.umax * screen_height) * 0.25\n",
    "            arrow_rot = pygame.transform.scale(self.arrow, (int(arrow_size), int(arrow_size)))\n",
    "            if self.u < 0:\n",
    "                arrow_rot = pygame.transform.flip(arrow_rot, True, False)\n",
    "            self.viewer.blit(arrow_rot, (screen_width // 2 - arrow_size // 2, screen_height // 2 - arrow_size // 2))\n",
    "\n",
    "        if self.render_mode == \"human\":\n",
    "            pygame.event.pump()\n",
    "            pygame.display.flip()\n",
    "\n",
    "    def close(self):\n",
    "        if self.viewer is not None:\n",
    "            import pygame\n",
    "            pygame.display.quit()\n",
    "            pygame.quit()\n",
    "            self.viewer = None\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cda7a4cc-ecdb-4aa9-8c4a-26561ebda07c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiIAAAHFCAYAAADPHZKNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAADf8UlEQVR4nOydd5zb5P3HP/K8vS+Xddl7kUkWEAIkQAK0UFaBlrBK2RAou6zCj5ZdRqDsVWbZkEACJIxssve+y7iZW77pqd8fjx5J3rIt2bL9vF+ve9lny9IjS3700XdyPM/zYDAYDAaDwUgAhkQPgMFgMBgMRvrChAiDwWAwGIyEwYQIg8FgMBiMhMGECIPBYDAYjITBhAiDwWAwGIyEwYQIg8FgMBiMhMGECIPBYDAYjITBhAiDwWAwGIyEwYQIg8FgMBiMhMGECCNpeeCBB8BxHI4ePRrw/VGjRuHEE0+Mat0nnngiRo0aFcPoAq8z2vHoDY7j8MADD4RcpqKiAhzHiX9msxnFxcWYNGkSbrnlFmzbts3vM8uWLQPHcVi2bFlE4+nXrx/OOOOMiD7z5ptveo0v2F+/fv0iWm+w8c2bNy/m9QRjwYIFePPNNzVbP4OhJaZED4DBYKQ2N9xwAy666CJ4PB40Nzdjw4YNeP311/Hcc8/h0Ucfxd/+9jdx2fHjx2PlypUYMWKE5uOaO3cuVq5c6fXa1KlTce655+LWW28VX7NarTFv67PPPkNeXl7M6wnGggULUFJSoqnYYTC0ggkRBoOhKX369MGUKVPE/+fMmYP58+fjnHPOwe23345Ro0bh9NNPBwDk5eV5LaslpaWlKC0t9Xu9rKws5BjcbjdcLldEAmXcuHFRjTGRRLOfDEY0MNcMI22gZv/3338f99xzD3r27Im8vDyccsop2LVrV8DP/PLLL5gyZQoyMzPRq1cv/P3vf4fb7fZa5sEHH8TkyZNRVFSEvLw8jB8/Hq+99hqU9JNU+lnqevj2228xfvx4ZGZmYtiwYXj99df91nnkyBH85S9/QXl5OSwWC3r27Ilzzz0XtbW14jI2mw233XYb+vfvD4vFgl69euHmm29Ge3u717psNhuuuuoqFBcXIycnB6eddhp2794ddr/CkZmZiddeew1msxmPP/64+Hog18z+/ftx4YUXomfPnrBarSgrK8PJJ5+MjRs3htzGggULYDKZcP/990c9Tupeeuyxx/Dwww+jf//+sFqtWLp0Kbq6unDrrbdi7NixyM/PR1FREaZOnYovvvjCbz2BXDNKj4HH48Fzzz2HsWPHIjMzEwUFBZgyZQq+/PJLcd3btm3DTz/9FNCddPDgQVxyySXo1q0brFYrhg8fjieffBIejyfsfi5ZsgQFBQW4+uqrA343RqPR6/gxGNHALCKMtOPuu+/G9OnT8eqrr8Jms+GOO+7AmWeeiR07dsBoNIrL1dTU4MILL8Sdd96Jhx56CN988w0efvhhNDU14fnnnxeXq6iowNVXX40+ffoAAFatWoUbbrgBR44cwX333RdyLJF8dtOmTbj11ltx5513oqysDK+++iquuOIKDBo0CCeccAIAIkImTZoEp9OJu+++G2PGjEFDQwO+++47NDU1oaysDB0dHZgxYwYOHz4sLrNt2zbcd9992LJlC77//ntwHAee5/H73/8eK1aswH333YdJkyZh+fLlovUiVnr27IkJEyZgxYoVcLlcMJkCT0dz5syB2+3GY489hj59+uDo0aNYsWIFmpubAy7P8zz+9re/4dlnn8Wrr76qirvi2WefxZAhQ/DEE08gLy8PgwcPht1uR2NjI2677Tb06tULDocD33//Pc455xy88cYb+POf/xx0fUqPAQDMmzcP7777Lq644go89NBDsFgsWL9+PSoqKgAQt8+5556L/Px8LFiwAIDkTqqvr8e0adPgcDjwj3/8A/369cPXX3+N2267Dfv27ROXD7Wfl19+OV5++WU89thjyM/PF5ddsGABLBYLLr/88pi/X0aawzMYScr999/PA+Dr6+sDvj9y5Eh+xowZ4v9Lly7lAfBz5szxWu6jjz7iAfArV64UX5sxYwYPgP/iiy+8lr3qqqt4g8HAV1ZWBtym2+3mnU4n/9BDD/HFxcW8x+PxWqd8PJF8tm/fvnxGRobXdjs7O/mioiL+6quvFl+7/PLLebPZzG/fvj3odh599FHeYDDwa9eu9Xr9f//7Hw+AX7hwIc/zPL9o0SIeAP/vf//ba7lHHnmEB8Dff//9QbfB8zx/4MABHgD/+OOPB13mggsu4AHwtbW1PM9Lx2jp0qU8z/P80aNHeQD8M888E3Jbffv25efOnct3dHTwf/jDH/j8/Hz++++/D/mZQADgr7vuOr99GDhwIO9wOEJ+1uVy8U6nk7/iiiv4cePG+Y3v0ksvFf9Xegx+/vlnHgB/zz33hNy277lOufPOO3kA/OrVq71ev+aaa3iO4/hdu3aF3c99+/bxBoOBf/rpp8XXOjs7+eLiYv6yyy4LOS4GQwnMNcNIO8466yyv/8eMGQMAqKys9Ho9NzfXb1kadPnzzz+Lr/3444845ZRTkJ+fD6PRCLPZjPvuuw8NDQ2oq6sLOZZIPjt27FjRcgIAGRkZGDJkiNe4Fy1ahJkzZ2L48OFBt/n1119j1KhRGDt2LFwul/h36qmnerlFli5dCgC4+OKL/b4DteDDuK+KioowcOBAPP7443jqqaewYcMGL5eCnIaGBpx00klYs2YNfv31V5x88smqjfOss86C2Wz2e/3jjz/G9OnTkZOTA5PJBLPZjNdeew07duwIuT6lx2DRokUAgOuuuy6qcf/4448YMWIEjj32WK/X582bB57n8eOPP4bdzwEDBuCMM87AggULxOP13nvvoaGhAddff31U42Iw5DAhwkhaqCnfN2aD4nK5Al48iouLvf6nZuzOzk6v18vKyvw+2717dwDkogcAa9aswezZswEAr7zyCpYvX461a9finnvuCbhOOZF+1nfcdOzy5err69G7d++g2wSA2tpabN68GWaz2esvNzcXPM+L6dANDQ0wmUx+26XfgRpUVlbCarWiqKgo4Pscx+GHH37Aqaeeisceewzjx49HaWkpbrzxRrS2tnotu3v3bqxevRqnn3666qnXPXr08Hvt008/xfnnn49evXrh3XffxcqVK7F27Vpcfvnl6OrqCrk+pcegvr4eRqMx6u+8oaEh4Nh79uwpvh9uPwHgpptuwp49e7BkyRIAwAsvvICpU6di/PjxUY2LwZDDYkQYSQsVCkeOHPETDTzPo7q6GhMnTox6/fLgTkpNTQ0ASRR88MEHMJvN+Prrr5GRkSEu9/nnn4ddfyyfDUZpaSkOHz4ccpmSkhJkZmYGDHSl7wNkH10uFxoaGrzECP0OYuXIkSNYt24dZsyYETQ+BAD69u2L1157DQARGx999BEeeOABOBwOvPTSS+JyU6dOxXnnnYcrrrgCAPDiiy/CYFDnXovGa8h599130b9/f3z44Yde79vt9rDrU3oMSktL4Xa7UVNTE1QkhKK4uBjV1dV+r1dVVXlthxJoPwHgpJNOwqhRo/D8888jJycH69evx7vvvhvxeBiMQDCLCCNpOemkk8BxHD788EO/97799lvYbDaccsopUa+/tbVVzEygvPfeezAYDGJwKMdxMJlMXkGunZ2deOedd8KuP5bPBuP000/H0qVLg2YBAcAZZ5yBffv2obi4GBMnTvT7oxkXM2fOBAD897//9fr8e++9F/X4KJ2dnbjyyivhcrlw++23K/7ckCFDcO+992L06NFYv3693/uXXnopPvjgAzFYNJi1TA04joPFYvG6eNfU1ATMmvFF6TGggcEvvvhiyPX5WsYoJ598MrZv3+73Xb399tvgOE48xkq48cYb8c033+Cuu+5CWVkZzjvvPMWfZTBCwSwijKRl4MCBuP766/H444+jubkZc+bMQWZmJtauXYt//vOfmDhxYkzxDMXFxbjmmmtw8OBBDBkyBAsXLsQrr7yCa665RozVmDt3Lp566ilcdNFF+Mtf/oKGhgY88cQTimovxPLZYDz00ENYtGgRTjjhBNx9990YPXo0mpub8e2332L+/PkYNmwYbr75ZnzyySc44YQTcMstt2DMmDHweDw4ePAgFi9ejFtvvRWTJ0/G7NmzccIJJ+D2229He3s7Jk6ciOXLl0cslA4ePIhVq1bB4/GgpaVFLGhWWVmJJ598UnRPBWLz5s24/vrrcd5552Hw4MGwWCz48ccfsXnzZtx5550BP3PuueciKysL5557Ljo7O/H+++/DYrFENGYlnHHGGfj0009x7bXX4txzz8WhQ4fwj3/8Az169MCePXtCflbpMTj++OPxpz/9CQ8//DBqa2txxhlnwGq1YsOGDcjKysINN9wAABg9ejQ++OADfPjhhxgwYAAyMjIwevRo3HLLLXj77bcxd+5cPPTQQ+jbty+++eYbLFiwANdccw2GDBmieH8vueQS3HXXXfj5559x7733avKdMtKUREbKMhix4vF4+BdffJGfOHEin5WVxVssFn7w4MH8HXfcwbe2tnotSzMyPv74Y6/XacbAG2+8Ib42Y8YMfuTIkfyyZcv4iRMn8larle/Rowd/9913806n0+vzr7/+Oj906FDearXyAwYM4B999FH+tdde4wHwBw4c8Fqnb2aD0s/SrBBfAq3z0KFD/OWXX853796dN5vNfM+ePfnzzz9fzEzheZ5va2vj7733Xn7o0KG8xWLh8/Pz+dGjR/O33HILX1NTIy7X3NzM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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "#from unbalanced_disk import UnbalancedDisk  # Adjust if in another module\n",
    "\n",
    "env = UnbalancedDisk(dt=0.025, render_mode='human')\n",
    "\n",
    "obs, _ = env.reset()\n",
    "Y = [obs]\n",
    "\n",
    "try:\n",
    "    for _ in range(200):\n",
    "        time.sleep(1 / 24)  # control FPS\n",
    "        action = env.action_space.sample()\n",
    "        obs, reward, terminated, truncated, _ = env.step(action)\n",
    "        Y.append(obs)\n",
    "        env.render()\n",
    "        if terminated or truncated:\n",
    "            break\n",
    "finally:\n",
    "    env.close()\n",
    "\n",
    "Y = np.array(Y)\n",
    "plt.plot(Y[:, 0], label='Angle (rad)')\n",
    "plt.plot(Y[:, 1], label='Angular Velocity (rad/s)')\n",
    "plt.title(\"Unbalanced Disk Trajectory\")\n",
    "plt.xlabel(\"Timestep\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b66ae5aa-7846-409f-944c-f18606ac6a2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "obs_tensor =  tensor([[0.0007, 0.0010]])\n",
      "Q(x) =  tensor([[-0.0793,  0.0121,  0.1566, -0.1227,  0.1736]],\n",
      "       grad_fn=<AddmmBackward0>)\n"
     ]
    }
   ],
   "source": [
    "from torch import nn\n",
    "import gymnasium as gym\n",
    "import gymnasium.wrappers\n",
    "import torch , time\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "class Qfunction(nn.Module):\n",
    "    def __init__(self, env):\n",
    "        super(Qfunction,self).__init__()\n",
    "        self.lay1 = nn.Linear(env.observation_space.shape[0], 40)\n",
    "        self.F1 =  nn.Tanh()\n",
    "        self.lay2 = nn.Linear(40,env.action_space.n)\n",
    "    \n",
    "    def forward(self, obs):\n",
    "        return self.lay2(self.F1(self.lay1(obs)))\n",
    "\n",
    "max_episode_steps = 500\n",
    "\n",
    "env = UnbalancedDisk(dt=0.025, render_mode=\"human\")\n",
    "env = gym.wrappers.TimeLimit(env,max_episode_steps=max_episode_steps) \n",
    "\n",
    "Q = Qfunction(env)\n",
    "\n",
    "#test validity:\n",
    "obs, info = env.reset()\n",
    "obs_tensor = torch.tensor(obs,dtype=torch.float32)[None,:] #convert to an torch tensor with size (1, Nobs=2)\n",
    "print('obs_tensor = ', obs_tensor)\n",
    "print('Q(x) = ',Q(obs_tensor)) #output #(1,Naction = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "35694551-6ec4-408a-b6f0-b45f0a4c56a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# visualization:\n",
    "import gymnasium as gym\n",
    "#num_actions = 5  # Number of discrete actions\n",
    "\n",
    "def show(Q,env):\n",
    "    with torch.no_grad():\n",
    "        # Qfun(obs) = Q-function.\n",
    "        Qfun = lambda x: Q(torch.tensor(x[None,:],dtype=torch.float32))[0].numpy() #convert x to torch.tensor -> put in the Q function -> back to numpy\n",
    "        try:\n",
    "            obs, info = env.reset() \n",
    "            env.render() \n",
    "            time.sleep(1)\n",
    "            while True: \n",
    "                               \n",
    "                action = np.argmax(Qfun(obs))\n",
    "\n",
    "                obs, reward, terminated, truncated, info = env.step(action)\n",
    "                time.sleep(1/60) \n",
    "                env.render() \n",
    "                print('Action =' , action , 'Qfun =' , Qfun(obs))\n",
    "                if terminated or truncated: \n",
    "                    time.sleep(0.5)  \n",
    "                    break  \n",
    "        finally: #this will always run even when an error occurs\n",
    "            env.close()\n",
    "\n",
    "max_episode_steps = 250\n",
    "\n",
    "env = UnbalancedDisk(dt=0.025, render_mode=\"human\")\n",
    "env = gym.wrappers.TimeLimit(env,max_episode_steps=max_episode_steps) \n",
    "Q = Qfunction(env)\n",
    "\n",
    "#show(Q,env)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2423b53a-bc38-40bc-8fcb-06957fe95078",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.6842985e-03 -1.2502720e-03]\n",
      " [-2.4124585e-02 -1.9029353e+00]\n",
      " [-9.4651170e-02 -3.5915182e+00]\n",
      " ...\n",
      " [-2.4852826e-01 -1.6207714e+01]\n",
      " [-6.2110722e-01 -1.3495889e+01]\n",
      " [-9.5116490e-01 -1.2746644e+01]] [0 0 0 ... 3 0 3] [-10.09120632 -10.59257027 -11.10454806 ... -24.56393116 -21.0574457\n",
      " -11.24459562] [[ -0.02412459  -1.9029353 ]\n",
      " [ -0.09465117  -3.5915182 ]\n",
      " [ -0.20018645  -4.947656  ]\n",
      " ...\n",
      " [ -0.6211072  -13.495889  ]\n",
      " [ -0.9511649  -12.746644  ]\n",
      " [ -1.2194829   -8.687363  ]] [0 0 0 ... 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Tackling two main challenges of DQN:\n",
    "# 1- Correlated trajectories\n",
    "# 2-  Non-stationary target\n",
    " #------------#\n",
    "\n",
    "# 1- Correlated trajectories\n",
    "\n",
    "# 1a - creating a replay memory structure:\n",
    "\n",
    "def replay_memory(Q, env, epsilon=0.1, N_replay=20_000): \n",
    "   \n",
    "    Start_state = []       #hold an array of (x_t)\n",
    "    Actions = []           #hold an array of (u_t)\n",
    "    Rewards = []           #hold an array of (r_{t+1})\n",
    "    End_state = []         #hold an array of (x_{t+1})\n",
    "    Terminal = []          #hold an array of (terminal_{t+1})\n",
    "    \n",
    "    Qfun = lambda x: Q(torch.tensor(x[None,:],dtype=torch.float32))[0].numpy() \n",
    "    with torch.no_grad():\n",
    "        \n",
    "        obs, info = env.reset()\n",
    "        for i in range(N_replay):\n",
    "            if np.random.uniform()>epsilon:   # applying eps-greedy algorithm to enhance exploration new actions out of the main policy with 10%\n",
    "                Qnow = Qfun(obs)\n",
    "                action = np.argmax(Qnow)      # determining action following main policy\n",
    "            else: \n",
    "                action = env.action_space.sample()  # randomly choosing a sampled action from action space\n",
    "            Start_state.append(obs) \n",
    "            Actions.append(action) \n",
    "\n",
    "            obs_next, reward, terminated, truncated, info = env.step(action) \n",
    "\n",
    "            Terminal.append(terminated) \n",
    "            Rewards.append(reward)\n",
    "            End_state.append(obs_next)\n",
    "\n",
    "            if terminated or truncated: \n",
    "                obs, info = env.reset()\n",
    "            else: \n",
    "                obs = obs_next \n",
    "                \n",
    "    #error checking:\n",
    "    assert len(Start_state)==len(Actions)==len(Rewards)==len(End_state)==len(Terminal), f'error in lengths: {len(Start_state)}=={len(Actions)}=={len(Rewards)}=={len(End_state)}=={len(Dones)}'\n",
    "    \n",
    "    return np.array(Start_state), np.array(Actions), np.array(Rewards), np.array(End_state), np.array(Terminal).astype(int)\n",
    "\n",
    "max_episode_steps = 250\n",
    "\n",
    "env = UnbalancedDisk(dt=0.025, render_mode=\"human\")\n",
    "\n",
    "env = gym.wrappers.TimeLimit(env,max_episode_steps=max_episode_steps)\n",
    "\n",
    "Q = Qfunction(env) \n",
    "\n",
    "Start_state, Actions, Rewards, End_state, Terminal = replay_memory(Q,env,N_replay=20000)\n",
    "print(Start_state, Actions, Rewards, End_state, Terminal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e2a2eb82-5120-4983-9e5e-d78babd444a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import gymnasium as gym\n",
    "\n",
    "def eval_Q(Q,env):\n",
    "    with torch.no_grad():\n",
    "        Qfun = lambda x: Q(torch.tensor(x[None,:],dtype=torch.float32)).detach().numpy()[0]\n",
    "        rewards_acc = 0 \n",
    "        obs, info = env.reset()\n",
    "        while True: \n",
    "            action = np.argmax(Qfun(obs)) \n",
    "            obs, reward, terminated, truncated, info = env.step(action) \n",
    "            rewards_acc += reward \n",
    "            if terminated or truncated: \n",
    "                return rewards_acc     # Value function per episode\n",
    "\n",
    "max_episode_steps = 250\n",
    "\n",
    "env = UnbalancedDisk(dt=0.025, render_mode=None)\n",
    "env = gym.wrappers.TimeLimit(env,max_episode_steps=max_episode_steps)\n",
    "\n",
    "Q = Qfunction(env) \n",
    "plt.plot([eval_Q(Q,env) for i in range(100)],'.') \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "834e29ce-da42-4fd6-aac2-8dae7099c5cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1b- Batch optimization to avoid run-away (gradient) parameters:\n",
    "# 2- Using Target Network with peroidic updates to avoid non-stationary Q_max target:\n",
    "\n",
    "from copy import deepcopy\n",
    "\n",
    "def DQN_replay(Q, optimizer, env, gamma=0.98, use_target_net=False, N_iterations=21, N_replay=20000, \\\n",
    "                N_epochs=10, batch_size=32, N_evals=10, target_net_update_feq=100):\n",
    "    best = -float('inf')\n",
    "    torch.save(Q.state_dict(),'Q-checkpoint')\n",
    "    try:\n",
    "        for iteration in range(N_iterations):\n",
    "            epsilon = 1.0 - iteration/(N_iterations-1)    # to achieve different levels of exploration away from the proposed given policy u* = argmax_u Q(x,u)\n",
    "            print(f'replay iteration {iteration} with epsilon={epsilon:.2%}...')\n",
    "            \n",
    "            # replay memory structure:\n",
    "            Start_state, Actions, Rewards, End_state, Terminal = replay_memory(Q, env, epsilon=epsilon, N_replay=N_replay) \n",
    "            \n",
    "            # convert different data arrays to PyTorch tensors for training\n",
    "            convert = lambda x: [torch.tensor(xi,dtype=torch.float32) for xi in x]  # xi = Start_state, Rewards , or ... etc.\n",
    "            Start_state, Rewards, End_state, Terminal = convert([Start_state, Rewards, End_state, Terminal])\n",
    "            Actions = Actions.astype(int)\n",
    "\n",
    "            print('starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target')\n",
    "            t = 0\n",
    "            for epoch in range(N_epochs):\n",
    "                \n",
    "                Qtarget = deepcopy(Q) if use_target_net else Q\n",
    "\n",
    "                if t%target_net_update_feq==0:    #update the Target Network each 100 timestep (i.e.t=iteration)\n",
    "                        Qtarget = deepcopy(Q)\n",
    "                    \n",
    "                for i in range(batch_size,len(Start_state)+1,batch_size): \n",
    "                    \n",
    "                                        \n",
    "                    Start_state_batch, Actions_batch, Rewards_batch, End_state_batch, Terminal_batch = [d[i-batch_size:i] for d in \\\n",
    "                                                                                                        [Start_state, Actions, Rewards, End_state, Terminal]] #e=) 3.\n",
    "                    # in the first epoch, in each iteration (i), take/slice from each list (i.e. Start_state, Rewards ,...etc = d) a batch of 32 elements then assign them to Start_state_batch , ...etc\n",
    "                   \n",
    "                    with torch.no_grad():\n",
    "                        if use_target_net:  # i.e. when the Target Network is in use and not yet updated by the Prediction main Q-function Network (i.e. TN became copy of main QN), take the max Q of the Loss function equals max of Q_TN(End_state,x_t+1)\n",
    "                            pass\n",
    "                            maxQ = torch.max(Qtarget(End_state_batch),dim=1)[0] #g)  This computes the maximum Q-value along dimension 1, which typically corresponds to the action dimension. It returns a tuple:[0]: The maximum Q-values for each state in the batch.\n",
    "                        else:\n",
    "                            maxQ = torch.max(Q(End_state_batch),dim=1)[0] \n",
    "                    \n",
    "                    # action_index = np.stack((np.arange(batch_size),Actions_batch),axis=0)\n",
    "                    # ids = np.arange(batch_size)\n",
    "                    \n",
    "                    Qnow = Q(Start_state_batch)\n",
    "                    # print(f'{action_index.shape=}')\n",
    "                    # print(f'{Qnow.shape=}')\n",
    "                    Qnow = Qnow[np.arange(batch_size), Actions_batch] #Q(x_t,u_t) This extracts the predicted Q-value for the action that was actually taken in each sample of the batch\n",
    "                    # print(Rewards_batch.shape, maxQ.shape, Terminal_batch.shape, Qnow.shape)\n",
    "                    Loss = torch.mean((Rewards_batch + gamma*maxQ*(1-Terminal_batch) - Qnow)**2)\n",
    "                    optimizer.zero_grad() \n",
    "                    Loss.backward() \n",
    "                    optimizer.step() \n",
    "                # start a new batch of the next 32 elements in each list of the replay memory in the same epoch, i.e. Start_state,Actions, ...etc\n",
    "                score = np.mean([eval_Q(Q,env) for i in range(N_evals)]) # Mean of ([policy evaluation (i.e. value function/accu rewards) per episode]) per epoch.\n",
    "                                        # evaluating Q-function after being nn optimized over a complete epoch. In evaluation process (eval_Q) we fed the optimized Q to the environment (env) for several (N-eval) episodes and have the average (mean) to avoid any noisy single episode estimate. \n",
    "                print(f'iteration={iteration} epoch={epoch} Average Reward per episode:',score)\n",
    "                if score>best:\n",
    "                    best = score\n",
    "                    print('################################# \\n new best',best,'saving Q... \\n#################################')\n",
    "                    torch.save(Q.state_dict(),'Q-checkpoint')\n",
    "            \n",
    "            print('loading best result')\n",
    "            Q.load_state_dict(torch.load('Q-checkpoint'))\n",
    "    finally: #this will always run even when using the a KeyBoard Interrupt. \n",
    "        print('loading best result')\n",
    "        Q.load_state_dict(torch.load('Q-checkpoint'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "434a6ffd-670d-4ac0-bf61-cd14115f0e3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "replay iteration 0 with epsilon=100.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=0 epoch=0 Average Reward per episode: -2153.4475615600263\n",
      "################################# \n",
      " new best -2153.4475615600263 saving Q... \n",
      "#################################\n",
      "iteration=0 epoch=1 Average Reward per episode: -2090.400936392861\n",
      "################################# \n",
      " new best -2090.400936392861 saving Q... \n",
      "#################################\n",
      "iteration=0 epoch=2 Average Reward per episode: -2123.622659459837\n",
      "iteration=0 epoch=3 Average Reward per episode: -2134.2310895297596\n",
      "iteration=0 epoch=4 Average Reward per episode: -2167.363018542703\n",
      "iteration=0 epoch=5 Average Reward per episode: -2314.3049705981352\n",
      "iteration=0 epoch=6 Average Reward per episode: -2447.4086976158105\n",
      "iteration=0 epoch=7 Average Reward per episode: -2467.9893782264135\n",
      "iteration=0 epoch=8 Average Reward per episode: -2468.0724051892253\n",
      "iteration=0 epoch=9 Average Reward per episode: -2468.041550560704\n",
      "loading best result\n",
      "replay iteration 1 with epsilon=95.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=1 epoch=0 Average Reward per episode: -2465.7991220882204\n",
      "iteration=1 epoch=1 Average Reward per episode: -2465.2794185893335\n",
      "iteration=1 epoch=2 Average Reward per episode: -2466.2680393572473\n",
      "iteration=1 epoch=3 Average Reward per episode: -2204.4018154993682\n",
      "iteration=1 epoch=4 Average Reward per episode: -2191.033850514376\n",
      "iteration=1 epoch=5 Average Reward per episode: -2465.8805300562135\n",
      "iteration=1 epoch=6 Average Reward per episode: -2466.066111947946\n",
      "iteration=1 epoch=7 Average Reward per episode: -2466.5380162646043\n",
      "iteration=1 epoch=8 Average Reward per episode: -2466.2906905178775\n",
      "iteration=1 epoch=9 Average Reward per episode: -2465.4171538344513\n",
      "loading best result\n",
      "replay iteration 2 with epsilon=90.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=2 epoch=0 Average Reward per episode: -2466.673452411096\n",
      "iteration=2 epoch=1 Average Reward per episode: -2466.388282626719\n",
      "iteration=2 epoch=2 Average Reward per episode: -2465.9483329898694\n",
      "iteration=2 epoch=3 Average Reward per episode: -2466.0621882977007\n",
      "iteration=2 epoch=4 Average Reward per episode: -2466.50469822104\n",
      "iteration=2 epoch=5 Average Reward per episode: -2465.629665632786\n",
      "iteration=2 epoch=6 Average Reward per episode: -2308.7166290332457\n",
      "iteration=2 epoch=7 Average Reward per episode: -2466.798502721803\n",
      "iteration=2 epoch=8 Average Reward per episode: -2123.6267855287515\n",
      "iteration=2 epoch=9 Average Reward per episode: -2123.4134899319156\n",
      "loading best result\n",
      "replay iteration 3 with epsilon=85.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=3 epoch=0 Average Reward per episode: -2466.5608909668904\n",
      "iteration=3 epoch=1 Average Reward per episode: -2466.8509286734966\n",
      "iteration=3 epoch=2 Average Reward per episode: -2466.037403034622\n",
      "iteration=3 epoch=3 Average Reward per episode: -2189.0300241090667\n",
      "iteration=3 epoch=4 Average Reward per episode: -2361.740137848402\n",
      "iteration=3 epoch=5 Average Reward per episode: -2361.9732597472766\n",
      "iteration=3 epoch=6 Average Reward per episode: -2123.5059249282767\n",
      "iteration=3 epoch=7 Average Reward per episode: -2124.099132817705\n",
      "iteration=3 epoch=8 Average Reward per episode: -2123.876688750172\n",
      "iteration=3 epoch=9 Average Reward per episode: -2123.8096960759704\n",
      "loading best result\n",
      "replay iteration 4 with epsilon=80.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=4 epoch=0 Average Reward per episode: -2466.552284745143\n",
      "iteration=4 epoch=1 Average Reward per episode: -2466.724191733837\n",
      "iteration=4 epoch=2 Average Reward per episode: -2466.447785130765\n",
      "iteration=4 epoch=3 Average Reward per episode: -2465.776223899189\n",
      "iteration=4 epoch=4 Average Reward per episode: -2466.2875039610626\n",
      "iteration=4 epoch=5 Average Reward per episode: -2466.0080376389133\n",
      "iteration=4 epoch=6 Average Reward per episode: -2123.214537346172\n",
      "iteration=4 epoch=7 Average Reward per episode: -2123.894310960382\n",
      "iteration=4 epoch=8 Average Reward per episode: -2123.0694083273906\n",
      "iteration=4 epoch=9 Average Reward per episode: -2123.516155191936\n",
      "loading best result\n",
      "replay iteration 5 with epsilon=75.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=5 epoch=0 Average Reward per episode: -2465.5789753644985\n",
      "iteration=5 epoch=1 Average Reward per episode: -2466.472936603771\n",
      "iteration=5 epoch=2 Average Reward per episode: -2466.4135374588755\n",
      "iteration=5 epoch=3 Average Reward per episode: -2466.002729615461\n",
      "iteration=5 epoch=4 Average Reward per episode: -2465.7074430608604\n",
      "iteration=5 epoch=5 Average Reward per episode: -2465.833392177587\n",
      "iteration=5 epoch=6 Average Reward per episode: -2466.9790783115004\n",
      "iteration=5 epoch=7 Average Reward per episode: -2466.798804044116\n",
      "iteration=5 epoch=8 Average Reward per episode: -2466.467008015239\n",
      "iteration=5 epoch=9 Average Reward per episode: -2123.7235456647786\n",
      "loading best result\n",
      "replay iteration 6 with epsilon=70.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=6 epoch=0 Average Reward per episode: -2466.2918530484285\n",
      "iteration=6 epoch=1 Average Reward per episode: -2466.3511376344613\n",
      "iteration=6 epoch=2 Average Reward per episode: -2466.377028894887\n",
      "iteration=6 epoch=3 Average Reward per episode: -2466.628486472041\n",
      "iteration=6 epoch=4 Average Reward per episode: -2309.2089218237256\n",
      "iteration=6 epoch=5 Average Reward per episode: -2455.734583613667\n",
      "iteration=6 epoch=6 Average Reward per episode: -2466.5803166769338\n",
      "iteration=6 epoch=7 Average Reward per episode: -2466.638812254882\n",
      "iteration=6 epoch=8 Average Reward per episode: -2466.4856452503473\n",
      "iteration=6 epoch=9 Average Reward per episode: -2123.7807262272618\n",
      "loading best result\n",
      "replay iteration 7 with epsilon=65.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=7 epoch=0 Average Reward per episode: -2466.477075087123\n",
      "iteration=7 epoch=1 Average Reward per episode: -2466.311814788193\n",
      "iteration=7 epoch=2 Average Reward per episode: -2466.004564105533\n",
      "iteration=7 epoch=3 Average Reward per episode: -2465.561514783009\n",
      "iteration=7 epoch=4 Average Reward per episode: -2466.000392364643\n",
      "iteration=7 epoch=5 Average Reward per episode: -2466.584993465939\n",
      "iteration=7 epoch=6 Average Reward per episode: -2466.830765721867\n",
      "iteration=7 epoch=7 Average Reward per episode: -2466.640926529891\n",
      "iteration=7 epoch=8 Average Reward per episode: -2466.533839317081\n",
      "iteration=7 epoch=9 Average Reward per episode: -2123.754225844471\n",
      "loading best result\n",
      "replay iteration 8 with epsilon=60.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=8 epoch=0 Average Reward per episode: -2466.492238758322\n",
      "iteration=8 epoch=1 Average Reward per episode: -2465.8847096442955\n",
      "iteration=8 epoch=2 Average Reward per episode: -2466.069345389967\n",
      "iteration=8 epoch=3 Average Reward per episode: -2465.3533746054954\n",
      "iteration=8 epoch=4 Average Reward per episode: -2464.0681554260764\n",
      "iteration=8 epoch=5 Average Reward per episode: -2408.6726011998535\n",
      "iteration=8 epoch=6 Average Reward per episode: -2123.6683941887204\n",
      "iteration=8 epoch=7 Average Reward per episode: -2123.4836291741676\n",
      "iteration=8 epoch=8 Average Reward per episode: -2123.470971233509\n",
      "iteration=8 epoch=9 Average Reward per episode: -2123.5354032899186\n",
      "loading best result\n",
      "replay iteration 9 with epsilon=55.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=9 epoch=0 Average Reward per episode: -2466.3605519581756\n",
      "iteration=9 epoch=1 Average Reward per episode: -2466.4728394084186\n",
      "iteration=9 epoch=2 Average Reward per episode: -2466.2682610102192\n",
      "iteration=9 epoch=3 Average Reward per episode: -2308.1879144983695\n",
      "iteration=9 epoch=4 Average Reward per episode: -2200.049532023671\n",
      "iteration=9 epoch=5 Average Reward per episode: -2310.201899440054\n",
      "iteration=9 epoch=6 Average Reward per episode: -2381.3072293030523\n",
      "iteration=9 epoch=7 Average Reward per episode: -2466.19211342058\n",
      "iteration=9 epoch=8 Average Reward per episode: -2465.9529484524387\n",
      "iteration=9 epoch=9 Average Reward per episode: -2466.5204290920556\n",
      "loading best result\n",
      "replay iteration 10 with epsilon=50.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=10 epoch=0 Average Reward per episode: -2466.044198134093\n",
      "iteration=10 epoch=1 Average Reward per episode: -2466.861196425899\n",
      "iteration=10 epoch=2 Average Reward per episode: -2466.2657062809085\n",
      "iteration=10 epoch=3 Average Reward per episode: -2467.064398794855\n",
      "iteration=10 epoch=4 Average Reward per episode: -2466.5920157868136\n",
      "iteration=10 epoch=5 Average Reward per episode: -2466.603688823806\n",
      "iteration=10 epoch=6 Average Reward per episode: -2466.6484685048104\n",
      "iteration=10 epoch=7 Average Reward per episode: -2466.241041435745\n",
      "iteration=10 epoch=8 Average Reward per episode: -2465.911614104047\n",
      "iteration=10 epoch=9 Average Reward per episode: -2466.219754685907\n",
      "loading best result\n",
      "replay iteration 11 with epsilon=45.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=11 epoch=0 Average Reward per episode: -2465.802819595492\n",
      "iteration=11 epoch=1 Average Reward per episode: -2465.5170337182917\n",
      "iteration=11 epoch=2 Average Reward per episode: -54471.893298530544\n",
      "iteration=11 epoch=3 Average Reward per episode: -57010.5823630496\n",
      "iteration=11 epoch=4 Average Reward per episode: -2465.0909659171402\n",
      "iteration=11 epoch=5 Average Reward per episode: -2466.646703695904\n",
      "iteration=11 epoch=6 Average Reward per episode: -2466.051870801609\n",
      "iteration=11 epoch=7 Average Reward per episode: -2466.351955521916\n",
      "iteration=11 epoch=8 Average Reward per episode: -2465.8990162802907\n",
      "iteration=11 epoch=9 Average Reward per episode: -2122.9494428697017\n",
      "loading best result\n",
      "replay iteration 12 with epsilon=40.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=12 epoch=0 Average Reward per episode: -2466.5621881405036\n",
      "iteration=12 epoch=1 Average Reward per episode: -25355.753474343666\n",
      "iteration=12 epoch=2 Average Reward per episode: -57002.49631990746\n",
      "iteration=12 epoch=3 Average Reward per episode: -57027.227907891\n",
      "iteration=12 epoch=4 Average Reward per episode: -2465.308967839267\n",
      "iteration=12 epoch=5 Average Reward per episode: -2465.884356337866\n",
      "iteration=12 epoch=6 Average Reward per episode: -2466.227780013648\n",
      "iteration=12 epoch=7 Average Reward per episode: -2465.958781533455\n",
      "iteration=12 epoch=8 Average Reward per episode: -2466.2179452298765\n",
      "iteration=12 epoch=9 Average Reward per episode: -2466.3472576652002\n",
      "loading best result\n",
      "replay iteration 13 with epsilon=35.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=13 epoch=0 Average Reward per episode: -2308.381707806436\n",
      "iteration=13 epoch=1 Average Reward per episode: -2466.408838032439\n",
      "iteration=13 epoch=2 Average Reward per episode: -2466.2055145126023\n",
      "iteration=13 epoch=3 Average Reward per episode: -2433.819546101126\n",
      "iteration=13 epoch=4 Average Reward per episode: -2347.5011054402567\n",
      "iteration=13 epoch=5 Average Reward per episode: -2466.655494615032\n",
      "iteration=13 epoch=6 Average Reward per episode: -2465.4904725579195\n",
      "iteration=13 epoch=7 Average Reward per episode: -2466.4432294733706\n",
      "iteration=13 epoch=8 Average Reward per episode: -2466.538368493804\n",
      "iteration=13 epoch=9 Average Reward per episode: -2465.8308457216685\n",
      "loading best result\n",
      "replay iteration 14 with epsilon=30.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=14 epoch=0 Average Reward per episode: -2466.870926781262\n",
      "iteration=14 epoch=1 Average Reward per episode: -2466.673837182997\n",
      "iteration=14 epoch=2 Average Reward per episode: -2466.2197535931796\n",
      "iteration=14 epoch=3 Average Reward per episode: -2466.046133326403\n",
      "iteration=14 epoch=4 Average Reward per episode: -2466.252657383586\n",
      "iteration=14 epoch=5 Average Reward per episode: -2465.7805867782895\n",
      "iteration=14 epoch=6 Average Reward per episode: -2466.670687082595\n",
      "iteration=14 epoch=7 Average Reward per episode: -2466.0535962660583\n",
      "iteration=14 epoch=8 Average Reward per episode: -2465.9285503243127\n",
      "iteration=14 epoch=9 Average Reward per episode: -2466.365441571159\n",
      "loading best result\n",
      "replay iteration 15 with epsilon=25.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=15 epoch=0 Average Reward per episode: -2465.682433142676\n",
      "iteration=15 epoch=1 Average Reward per episode: -2466.326280044586\n",
      "iteration=15 epoch=2 Average Reward per episode: -2466.1874493599\n",
      "iteration=15 epoch=3 Average Reward per episode: -2465.6475272032967\n",
      "iteration=15 epoch=4 Average Reward per episode: -2466.250278646084\n",
      "iteration=15 epoch=5 Average Reward per episode: -2465.7737917152813\n",
      "iteration=15 epoch=6 Average Reward per episode: -2466.1777269850236\n",
      "iteration=15 epoch=7 Average Reward per episode: -2465.9627966948465\n",
      "iteration=15 epoch=8 Average Reward per episode: -2466.296523803642\n",
      "iteration=15 epoch=9 Average Reward per episode: -2466.1012273951455\n",
      "loading best result\n",
      "replay iteration 16 with epsilon=20.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=16 epoch=0 Average Reward per episode: -2144.4164264639485\n",
      "iteration=16 epoch=1 Average Reward per episode: -2144.501335007152\n",
      "iteration=16 epoch=2 Average Reward per episode: -2131.3946595387365\n",
      "iteration=16 epoch=3 Average Reward per episode: -2084.444169973937\n",
      "################################# \n",
      " new best -2084.444169973937 saving Q... \n",
      "#################################\n",
      "iteration=16 epoch=4 Average Reward per episode: -2123.9797336311376\n",
      "iteration=16 epoch=5 Average Reward per episode: -2123.2465464828374\n",
      "iteration=16 epoch=6 Average Reward per episode: -2123.4153123114434\n",
      "iteration=16 epoch=7 Average Reward per episode: -2123.9886421117913\n",
      "iteration=16 epoch=8 Average Reward per episode: -2123.463038046484\n",
      "iteration=16 epoch=9 Average Reward per episode: -2123.8208797898105\n",
      "loading best result\n",
      "replay iteration 17 with epsilon=15.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=17 epoch=0 Average Reward per episode: -2123.470993170505\n",
      "iteration=17 epoch=1 Average Reward per episode: -2123.529627931412\n",
      "iteration=17 epoch=2 Average Reward per episode: -2123.800367121937\n",
      "iteration=17 epoch=3 Average Reward per episode: -2123.1482072669983\n",
      "iteration=17 epoch=4 Average Reward per episode: -2123.8884194243233\n",
      "iteration=17 epoch=5 Average Reward per episode: -2123.8365145792764\n",
      "iteration=17 epoch=6 Average Reward per episode: -2123.577397572137\n",
      "iteration=17 epoch=7 Average Reward per episode: -2123.6857681496504\n",
      "iteration=17 epoch=8 Average Reward per episode: -2123.708363377411\n",
      "iteration=17 epoch=9 Average Reward per episode: -2123.877404300999\n",
      "loading best result\n",
      "replay iteration 18 with epsilon=10.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=18 epoch=0 Average Reward per episode: -2123.91147349694\n",
      "iteration=18 epoch=1 Average Reward per episode: -2124.4907104847453\n",
      "iteration=18 epoch=2 Average Reward per episode: -2124.0922714320077\n",
      "iteration=18 epoch=3 Average Reward per episode: -2123.4857848381153\n",
      "iteration=18 epoch=4 Average Reward per episode: -2123.484080046058\n",
      "iteration=18 epoch=5 Average Reward per episode: -2124.0300863332377\n",
      "iteration=18 epoch=6 Average Reward per episode: -2123.878964774006\n",
      "iteration=18 epoch=7 Average Reward per episode: -2123.305914794367\n",
      "iteration=18 epoch=8 Average Reward per episode: -2124.0252561214556\n",
      "iteration=18 epoch=9 Average Reward per episode: -2124.632064090597\n",
      "loading best result\n",
      "replay iteration 19 with epsilon=5.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=19 epoch=0 Average Reward per episode: -46855.17169351094\n",
      "iteration=19 epoch=1 Average Reward per episode: -1492.354656918626\n",
      "################################# \n",
      " new best -1492.354656918626 saving Q... \n",
      "#################################\n",
      "iteration=19 epoch=2 Average Reward per episode: -1491.3786178079865\n",
      "################################# \n",
      " new best -1491.3786178079865 saving Q... \n",
      "#################################\n",
      "iteration=19 epoch=3 Average Reward per episode: -1456.1288009609195\n",
      "################################# \n",
      " new best -1456.1288009609195 saving Q... \n",
      "#################################\n",
      "iteration=19 epoch=4 Average Reward per episode: -2123.9048046277017\n",
      "iteration=19 epoch=5 Average Reward per episode: -2123.8091147844925\n",
      "iteration=19 epoch=6 Average Reward per episode: -2123.863115460014\n",
      "iteration=19 epoch=7 Average Reward per episode: -2123.1783497367956\n",
      "iteration=19 epoch=8 Average Reward per episode: -2123.2618936040294\n",
      "iteration=19 epoch=9 Average Reward per episode: -2123.2593265250916\n",
      "loading best result\n",
      "replay iteration 20 with epsilon=0.00%...\n",
      "starting training on replay memory information using batch optimization and Target Network to overcome non-stationary target\n",
      "iteration=20 epoch=0 Average Reward per episode: -1491.8424083689447\n",
      "iteration=20 epoch=1 Average Reward per episode: -1492.0266139651487\n",
      "iteration=20 epoch=2 Average Reward per episode: -1491.9915454817876\n",
      "iteration=20 epoch=3 Average Reward per episode: -1491.97502083002\n",
      "iteration=20 epoch=4 Average Reward per episode: -1491.8074119857947\n",
      "iteration=20 epoch=5 Average Reward per episode: -1492.1925107898503\n",
      "iteration=20 epoch=6 Average Reward per episode: -1492.0609490642303\n",
      "iteration=20 epoch=7 Average Reward per episode: -1491.586115270576\n",
      "iteration=20 epoch=8 Average Reward per episode: -1491.8465998229487\n",
      "iteration=20 epoch=9 Average Reward per episode: -1491.7546238003777\n",
      "loading best result\n",
      "loading best result\n"
     ]
    }
   ],
   "source": [
    "# Traning DQN with buffer structure:\n",
    "\n",
    "import torch\n",
    "from torch import nn\n",
    "import gymnasium as gym\n",
    "\n",
    "max_episode_steps = 250\n",
    "env = UnbalancedDisk(dt=0.025, render_mode=None)\n",
    "env = gym.wrappers.TimeLimit(env,max_episode_steps=max_episode_steps)\n",
    "\n",
    "\n",
    "gamma = 0.98 \n",
    "batch_size = 32 \n",
    "N_iterations = 21 \n",
    "N_replay = 20000\n",
    "N_epochs = 10 \n",
    "N_evals = 5 \n",
    "lr = 0.0005      #given\n",
    "\n",
    "assert isinstance(env.action_space,gym.spaces.Discrete), 'action space requires to be discrete'\n",
    "\n",
    "Q = Qfunction(env)\n",
    "\n",
    "optimizer = torch.optim.Adam(Q.parameters(),lr=lr)   #low learning rate\n",
    "DQN_replay(Q, optimizer, env, use_target_net=True, gamma=gamma, N_iterations=N_iterations, \\\n",
    "            N_replay=N_replay, N_epochs=N_epochs, N_evals=N_evals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "360df35b-38f7-48fb-8aed-ea40a3fa3318",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Action = 3 Qfun = [-66.04915  -67.26892  -66.232445 -65.78482  -65.79582 ]\n",
      "Action = 3 Qfun = [-66.05119  -67.270615 -66.233955 -65.786125 -65.795006]\n",
      "Action = 3 Qfun = [-66.06559  -67.284546 -66.24746  -65.79934  -65.80492 ]\n",
      "Action = 3 Qfun = [-66.08644 -67.30492 -66.2673  -65.81889 -65.82079]\n",
      "Action = 3 Qfun = [-66.11135 -67.32941 -66.2912  -65.84254 -65.84076]\n",
      "Action = 4 Qfun = [-66.11996  -67.3371   -66.298134 -65.84903  -65.8408  ]\n",
      "Action = 4 Qfun = [-66.14843  -67.36466  -66.324455 -65.874954 -65.85873 ]\n",
      "Action = 4 Qfun = [-66.19072 -67.40618 -66.36443 -65.91468 -65.88989]\n",
      "Action = 4 Qfun = [-66.2392   -67.454124 -66.41074  -65.96092  -65.92803 ]\n",
      "Action = 4 Qfun = [-66.290886 -67.50552  -66.4605   -66.01074  -65.97046 ]\n",
      "Action = 4 Qfun = [-66.338776 -67.55333  -66.506905 -66.0573   -66.01117 ]\n",
      "Action = 4 Qfun = [-66.38296 -67.59758 -66.54998 -66.10056 -66.04988]\n",
      "Action = 4 Qfun = [-66.42206  -67.63681  -66.588356 -66.1391   -66.08521 ]\n",
      "Action = 4 Qfun = [-66.456116 -67.671036 -66.62201  -66.1729   -66.116936]\n",
      "Action = 4 Qfun = [-66.48488  -67.699936 -66.65063  -66.201614 -66.14465 ]\n",
      "Action = 4 Qfun = [-66.50849  -67.723656 -66.67431  -66.22536  -66.168304]\n",
      "Action = 4 Qfun = [-66.523834 -67.739075 -66.689896 -66.240944 -66.18451 ]\n",
      "Action = 4 Qfun = [-66.53279  -67.748085 -66.699165 -66.250206 -66.19487 ]\n",
      "Action = 4 Qfun = [-66.53757  -67.752914 -66.704384 -66.25537  -66.201675]\n",
      "Action = 4 Qfun = [-66.537605 -67.753006 -66.70496  -66.25591  -66.20441 ]\n",
      "Action = 4 Qfun = [-66.53294  -67.74843  -66.70095  -66.25184  -66.202965]\n",
      "Action = 4 Qfun = [-66.52344 -67.73903 -66.69215 -66.24298 -66.19708]\n",
      "Action = 4 Qfun = [-66.50835  -67.72408  -66.67785  -66.22862  -66.186104]\n",
      "Action = 4 Qfun = [-66.48895 -67.70485 -66.65925 -66.20998 -66.1709 ]\n",
      "Action = 4 Qfun = [-66.464325 -67.68038  -66.63545  -66.18614  -66.15068 ]\n",
      "Action = 4 Qfun = [-66.43786 -67.65406 -66.60973 -66.1604  -66.12814]\n",
      "Action = 4 Qfun = [-66.40933  -67.62564  -66.58188  -66.13252  -66.103134]\n",
      "Action = 4 Qfun = [-66.3831  -67.59946 -66.55613 -66.10674 -66.07931]\n",
      "Action = 4 Qfun = [-66.35912  -67.57544  -66.53245  -66.08302  -66.056786]\n",
      "Action = 4 Qfun = [-66.34134  -67.55754  -66.51469  -66.065216 -66.039024]\n",
      "Action = 4 Qfun = [-66.333565 -67.54964  -66.50677  -66.05727  -66.0305  ]\n",
      "Action = 4 Qfun = [-66.330765 -67.54672  -66.50374  -66.0542   -66.026505]\n",
      "Action = 4 Qfun = [-66.333244 -67.54904  -66.50584  -66.05627  -66.02706 ]\n",
      "Action = 4 Qfun = [-66.3398   -67.55545  -66.511925 -66.06233  -66.031265]\n",
      "Action = 4 Qfun = [-66.34873  -67.564255 -66.520386 -66.07078  -66.03782 ]\n",
      "Action = 4 Qfun = [-66.35948  -67.574905 -66.53068  -66.08107  -66.04627 ]\n",
      "Action = 4 Qfun = [-66.37141 -67.58675 -66.54218 -66.09259 -66.0561 ]\n",
      "Action = 4 Qfun = [-66.38426  -67.59953  -66.55465  -66.10508  -66.067024]\n",
      "Action = 4 Qfun = [-66.39705  -67.612305 -66.56714  -66.1176   -66.07824 ]\n",
      "Action = 4 Qfun = [-66.40879  -67.624054 -66.57866  -66.12914  -66.08886 ]\n",
      "Action = 4 Qfun = [-66.41827  -67.633545 -66.588036 -66.13855  -66.09781 ]\n",
      "Action = 4 Qfun = [-66.426544 -67.64186  -66.59628  -66.14681  -66.105896]\n",
      "Action = 4 Qfun = [-66.4308  -67.64615 -66.60058 -66.15112 -66.11033]\n",
      "Action = 4 Qfun = [-66.43098  -67.64633  -66.600746 -66.15129  -66.11046 ]\n",
      "Action = 4 Qfun = [-66.42996  -67.645325 -66.59978  -66.150314 -66.109665]\n",
      "Action = 4 Qfun = [-66.430725 -67.64607  -66.6005   -66.15105  -66.11027 ]\n",
      "Action = 4 Qfun = [-66.43069 -67.64604 -66.60047 -66.15102 -66.11024]\n",
      "Action = 4 Qfun = [-66.430695 -67.64605  -66.60049  -66.151024 -66.110245]\n",
      "Action = 4 Qfun = [-66.43077  -67.64612  -66.60055  -66.15109  -66.110306]\n",
      "Action = 4 Qfun = [-66.43043  -67.64578  -66.60023  -66.150764 -66.11003 ]\n",
      "Action = 4 Qfun = [-66.43044  -67.645805 -66.60024  -66.15079  -66.11005 ]\n",
      "Action = 4 Qfun = [-66.430595 -67.64595  -66.60038  -66.150925 -66.11017 ]\n",
      "Action = 4 Qfun = [-66.43034  -67.64569  -66.600136 -66.15068  -66.10997 ]\n",
      "Action = 4 Qfun = [-66.4305  -67.64585 -66.60029 -66.15083 -66.11009]\n",
      "Action = 4 Qfun = [-66.43035  -67.645706 -66.60015  -66.150696 -66.10998 ]\n",
      "Action = 4 Qfun = [-66.43022  -67.645584 -66.60003  -66.150566 -66.10986 ]\n",
      "Action = 4 Qfun = [-66.431    -67.64635  -66.60078  -66.151306 -66.11048 ]\n",
      "Action = 4 Qfun = [-66.430405 -67.64577  -66.600204 -66.15074  -66.110016]\n",
      "Action = 4 Qfun = [-66.430565 -67.64592  -66.60035  -66.150894 -66.11014 ]\n",
      "Action = 4 Qfun = [-66.43034  -67.645706 -66.60014  -66.15069  -66.10997 ]\n",
      "Action = 4 Qfun = [-66.43044 -67.6458  -66.60024 -66.15077 -66.11005]\n",
      "Action = 4 Qfun = [-66.430855 -67.6462   -66.60063  -66.15118  -66.11038 ]\n",
      "Action = 4 Qfun = [-66.430305 -67.64566  -66.600105 -66.15064  -66.10994 ]\n",
      "Action = 4 Qfun = [-66.43058  -67.645935 -66.600365 -66.15091  -66.11015 ]\n",
      "Action = 4 Qfun = [-66.43028  -67.64564  -66.600075 -66.15062  -66.10992 ]\n",
      "Action = 4 Qfun = [-66.430466 -67.64581  -66.60026  -66.1508   -66.11006 ]\n",
      "Action = 4 Qfun = [-66.43031  -67.64567  -66.600105 -66.15065  -66.10995 ]\n",
      "Action = 4 Qfun = [-66.4303  -67.64566 -66.6001  -66.15065 -66.10993]\n",
      "Action = 4 Qfun = [-66.43028  -67.64564  -66.60008  -66.15063  -66.109924]\n",
      "Action = 4 Qfun = [-66.43035  -67.645706 -66.60015  -66.150696 -66.10997 ]\n",
      "Action = 4 Qfun = [-66.42993  -67.645294 -66.59974  -66.15028  -66.109634]\n",
      "Action = 4 Qfun = [-66.43065  -67.645996 -66.600426 -66.15097  -66.11021 ]\n",
      "Action = 4 Qfun = [-66.430435 -67.6458   -66.60023  -66.15077  -66.11004 ]\n",
      "Action = 4 Qfun = [-66.43014  -67.6455   -66.599945 -66.15048  -66.1098  ]\n",
      "Action = 4 Qfun = [-66.430084 -67.64545  -66.59989  -66.15044  -66.10975 ]\n",
      "Action = 4 Qfun = [-66.43005  -67.64542  -66.59987  -66.150406 -66.10974 ]\n",
      "Action = 4 Qfun = [-66.43045 -67.6458  -66.60024 -66.15079 -66.11005]\n",
      "Action = 4 Qfun = [-66.43028  -67.645645 -66.60009  -66.15063  -66.10992 ]\n",
      "Action = 4 Qfun = [-66.43079 -67.64614 -66.60056 -66.15111 -66.11032]\n",
      "Action = 4 Qfun = [-66.42958 -67.64494 -66.59941 -66.14995 -66.10936]\n",
      "Action = 4 Qfun = [-66.43027 -67.64562 -66.60007 -66.15061 -66.1099 ]\n",
      "Action = 4 Qfun = [-66.43037  -67.64572  -66.60017  -66.15071  -66.109985]\n",
      "Action = 4 Qfun = [-66.42972 -67.64507 -66.59953 -66.15007 -66.10945]\n",
      "Action = 4 Qfun = [-66.43012 -67.64548 -66.59992 -66.15047 -66.10979]\n",
      "Action = 4 Qfun = [-66.43062  -67.64598  -66.60041  -66.150955 -66.1102  ]\n",
      "Action = 4 Qfun = [-66.4301   -67.64546  -66.599915 -66.15046  -66.10978 ]\n",
      "Action = 4 Qfun = [-66.43018 -67.64554 -66.59999 -66.15053 -66.10984]\n",
      "Action = 4 Qfun = [-66.43028  -67.645645 -66.60008  -66.15062  -66.10991 ]\n",
      "Action = 4 Qfun = [-66.42989  -67.64525  -66.59971  -66.150246 -66.1096  ]\n",
      "Action = 4 Qfun = [-66.43036  -67.64571  -66.60015  -66.150696 -66.109985]\n",
      "Action = 4 Qfun = [-66.43046 -67.64581 -66.60025 -66.15079 -66.11005]\n",
      "Action = 4 Qfun = [-66.43037  -67.64572  -66.60017  -66.1507   -66.109985]\n",
      "Action = 4 Qfun = [-66.42995  -67.64532  -66.59977  -66.150314 -66.10966 ]\n",
      "Action = 4 Qfun = [-66.429726 -67.64509  -66.59955  -66.150085 -66.109474]\n",
      "Action = 4 Qfun = [-66.43006 -67.64542 -66.59988 -66.15041 -66.10974]\n",
      "Action = 4 Qfun = [-66.43047 -67.64583 -66.60026 -66.1508  -66.11008]\n",
      "Action = 4 Qfun = [-66.42996  -67.645325 -66.59978  -66.150314 -66.10966 ]\n",
      "Action = 4 Qfun = [-66.43023  -67.645584 -66.60003  -66.15057  -66.10987 ]\n",
      "Action = 4 Qfun = [-66.43007  -67.64542  -66.59988  -66.150406 -66.10974 ]\n",
      "Action = 4 Qfun = [-66.429886 -67.64524  -66.5997   -66.15024  -66.109604]\n",
      "Action = 4 Qfun = [-66.42983 -67.64519 -66.59965 -66.15019 -66.10956]\n",
      "Action = 4 Qfun = [-66.430405 -67.64577  -66.6002   -66.15074  -66.11001 ]\n",
      "Action = 4 Qfun = [-66.43002  -67.645386 -66.59983  -66.150375 -66.10971 ]\n",
      "Action = 4 Qfun = [-66.43025  -67.64561  -66.600044 -66.15059  -66.109886]\n",
      "Action = 4 Qfun = [-66.43002  -67.645386 -66.59983  -66.150375 -66.10971 ]\n",
      "Action = 4 Qfun = [-66.43023  -67.645584 -66.60003  -66.15057  -66.10988 ]\n",
      "Action = 4 Qfun = [-66.430016 -67.64538  -66.59983  -66.15037  -66.10971 ]\n",
      "Action = 4 Qfun = [-66.430565 -67.64592  -66.60036  -66.150894 -66.11014 ]\n",
      "Action = 4 Qfun = [-66.430405 -67.64577  -66.600204 -66.15075  -66.110016]\n",
      "Action = 4 Qfun = [-66.42991  -67.64526  -66.599724 -66.15027  -66.10962 ]\n",
      "Action = 4 Qfun = [-66.430336 -67.64569  -66.600136 -66.15068  -66.109955]\n",
      "Action = 4 Qfun = [-66.42986 -67.64522 -66.59968 -66.15022 -66.10957]\n",
      "Action = 4 Qfun = [-66.42989  -67.645256 -66.59971  -66.15025  -66.109604]\n",
      "Action = 4 Qfun = [-66.430176 -67.64553  -66.599976 -66.15052  -66.10983 ]\n",
      "Action = 4 Qfun = [-66.43036 -67.64572 -66.60017 -66.1507  -66.10998]\n",
      "Action = 4 Qfun = [-66.429436 -67.6448   -66.599266 -66.14981  -66.10924 ]\n",
      "Action = 4 Qfun = [-66.43031  -67.645676 -66.60012  -66.15065  -66.10994 ]\n",
      "Action = 4 Qfun = [-66.42992 -67.64528 -66.59973 -66.15027 -66.10962]\n",
      "Action = 4 Qfun = [-66.42993  -67.64529  -66.59974  -66.15028  -66.109634]\n",
      "Action = 4 Qfun = [-66.42923 -67.64459 -66.59907 -66.14961 -66.10907]\n",
      "Action = 4 Qfun = [-66.43045 -67.64581 -66.60024 -66.15079 -66.11005]\n",
      "Action = 4 Qfun = [-66.430016 -67.64537  -66.59982  -66.15037  -66.10969 ]\n",
      "Action = 4 Qfun = [-66.42963  -67.64499  -66.59945  -66.149994 -66.1094  ]\n",
      "Action = 4 Qfun = [-66.429504 -67.64487  -66.59934  -66.14987  -66.1093  ]\n",
      "Action = 4 Qfun = [-66.42964  -67.645004 -66.59947  -66.15001  -66.109406]\n",
      "Action = 4 Qfun = [-66.42947 -67.64483 -66.5993  -66.14984 -66.10926]\n",
      "Action = 4 Qfun = [-66.42947 -67.64483 -66.5993  -66.14984 -66.10926]\n",
      "Action = 4 Qfun = [-66.42967  -67.645035 -66.599495 -66.15004  -66.10942 ]\n",
      "Action = 4 Qfun = [-66.42949 -67.64485 -66.59932 -66.14986 -66.10927]\n",
      "Action = 4 Qfun = [-66.43054  -67.6459   -66.600334 -66.15088  -66.11012 ]\n",
      "Action = 4 Qfun = [-66.4296   -67.644966 -66.599434 -66.14997  -66.109375]\n",
      "Action = 4 Qfun = [-66.42976 -67.64513 -66.59959 -66.15012 -66.1095 ]\n",
      "Action = 4 Qfun = [-66.42967  -67.645035 -66.599495 -66.15004  -66.10942 ]\n",
      "Action = 4 Qfun = [-66.42983  -67.645195 -66.59965  -66.15019  -66.10955 ]\n",
      "Action = 4 Qfun = [-66.42969  -67.64505  -66.59951  -66.150055 -66.109436]\n",
      "Action = 4 Qfun = [-66.42952 -67.64488 -66.59935 -66.14989 -66.1093 ]\n",
      "Action = 4 Qfun = [-66.429474 -67.64484  -66.599304 -66.14984  -66.10926 ]\n",
      "Action = 4 Qfun = [-66.42978 -67.64514 -66.5996  -66.15014 -66.10953]\n",
      "Action = 4 Qfun = [-66.429504 -67.64487  -66.599335 -66.14988  -66.10929 ]\n",
      "Action = 4 Qfun = [-66.429596 -67.644966 -66.59943  -66.14996  -66.109375]\n",
      "Action = 4 Qfun = [-66.4295   -67.64485  -66.59933  -66.149864 -66.10928 ]\n",
      "Action = 4 Qfun = [-66.43051  -67.645874 -66.6003   -66.15085  -66.11011 ]\n",
      "Action = 4 Qfun = [-66.429985 -67.64534  -66.599785 -66.15033  -66.109665]\n",
      "Action = 4 Qfun = [-66.429474 -67.64484  -66.5993   -66.14984  -66.10927 ]\n",
      "Action = 4 Qfun = [-66.43038  -67.645744 -66.60018  -66.15073  -66.11    ]\n",
      "Action = 4 Qfun = [-66.429184 -67.64454  -66.59902  -66.14956  -66.10903 ]\n",
      "Action = 4 Qfun = [-66.429375 -67.64473  -66.59921  -66.14975  -66.109184]\n",
      "Action = 4 Qfun = [-66.429535 -67.6449   -66.59936  -66.1499   -66.109314]\n",
      "Action = 4 Qfun = [-66.429276 -67.64464  -66.59911  -66.14966  -66.109116]\n",
      "Action = 4 Qfun = [-66.4293   -67.64467  -66.59914  -66.14967  -66.109116]\n",
      "Action = 4 Qfun = [-66.429535 -67.6449   -66.59936  -66.1499   -66.1093  ]\n",
      "Action = 4 Qfun = [-66.42941  -67.644775 -66.59924  -66.14979  -66.10922 ]\n",
      "Action = 4 Qfun = [-66.4294   -67.64476  -66.599236 -66.14977  -66.10921 ]\n",
      "Action = 4 Qfun = [-66.42955 -67.64491 -66.59938 -66.14992 -66.10933]\n",
      "Action = 4 Qfun = [-66.42933  -67.644684 -66.59917  -66.149704 -66.10916 ]\n",
      "Action = 4 Qfun = [-66.42964  -67.645    -66.599464 -66.15     -66.10939 ]\n",
      "Action = 4 Qfun = [-66.42969  -67.64505  -66.59951  -66.150055 -66.109436]\n",
      "Action = 4 Qfun = [-66.42944  -67.644806 -66.59927  -66.14982  -66.109245]\n",
      "Action = 4 Qfun = [-66.42918 -67.64455 -66.59902 -66.14957 -66.10904]\n",
      "Action = 4 Qfun = [-66.42941  -67.644775 -66.59925  -66.14978  -66.10922 ]\n",
      "Action = 4 Qfun = [-66.42893 -67.6443  -66.59879 -66.14933 -66.10884]\n",
      "Action = 4 Qfun = [-66.42934  -67.6447   -66.599174 -66.14972  -66.10915 ]\n",
      "Action = 4 Qfun = [-66.429596 -67.64495  -66.59942  -66.14996  -66.10936 ]\n",
      "Action = 4 Qfun = [-66.42931 -67.64468 -66.59915 -66.14969 -66.10914]\n",
      "Action = 4 Qfun = [-66.42945  -67.644806 -66.59928  -66.14982  -66.10924 ]\n",
      "Action = 4 Qfun = [-66.429184 -67.64455  -66.59902  -66.14957  -66.10903 ]\n",
      "Action = 4 Qfun = [-66.428795 -67.64415  -66.59865  -66.149185 -66.10872 ]\n",
      "Action = 4 Qfun = [-66.42928  -67.64464  -66.59911  -66.14966  -66.109116]\n",
      "Action = 4 Qfun = [-66.42846  -67.64383  -66.598335 -66.148865 -66.10846 ]\n",
      "Action = 4 Qfun = [-66.42896  -67.64433  -66.598816 -66.14935  -66.108864]\n",
      "Action = 4 Qfun = [-66.429276 -67.64464  -66.59911  -66.14966  -66.10912 ]\n",
      "Action = 4 Qfun = [-66.4299   -67.64526  -66.59972  -66.15025  -66.109604]\n",
      "Action = 4 Qfun = [-66.42937  -67.64473  -66.5992   -66.14974  -66.109184]\n",
      "Action = 4 Qfun = [-66.429535 -67.6449   -66.59936  -66.1499   -66.109314]\n",
      "Action = 4 Qfun = [-66.42963  -67.64499  -66.59945  -66.149994 -66.1094  ]\n",
      "Action = 4 Qfun = [-66.429115 -67.64447  -66.59896  -66.149506 -66.10898 ]\n",
      "Action = 4 Qfun = [-66.429344 -67.64471  -66.59918  -66.14972  -66.10917 ]\n",
      "Action = 4 Qfun = [-66.429276 -67.64464  -66.59911  -66.14965  -66.10911 ]\n",
      "Action = 4 Qfun = [-66.4294   -67.64477  -66.599236 -66.14978  -66.10921 ]\n",
      "Action = 4 Qfun = [-66.42951  -67.644875 -66.59934  -66.14988  -66.10928 ]\n",
      "Action = 4 Qfun = [-66.429214 -67.64458  -66.59905  -66.1496   -66.109055]\n",
      "Action = 4 Qfun = [-66.42918 -67.64454 -66.59902 -66.14955 -66.10903]\n",
      "Action = 4 Qfun = [-66.42955  -67.644905 -66.59937  -66.14992  -66.10933 ]\n",
      "Action = 4 Qfun = [-66.429245 -67.6446   -66.59908  -66.14962  -66.109085]\n",
      "Action = 4 Qfun = [-66.42953  -67.64489  -66.59936  -66.149895 -66.109314]\n",
      "Action = 4 Qfun = [-66.42934  -67.64471  -66.599174 -66.14972  -66.10916 ]\n",
      "Action = 4 Qfun = [-66.42877  -67.644135 -66.59863  -66.14917  -66.1087  ]\n",
      "Action = 4 Qfun = [-66.42885 -67.64421 -66.5987  -66.14925 -66.10877]\n",
      "Action = 4 Qfun = [-66.42881  -67.64418  -66.59867  -66.14921  -66.108734]\n",
      "Action = 4 Qfun = [-66.42897 -67.64433 -66.59882 -66.14935 -66.10886]\n",
      "Action = 4 Qfun = [-66.42882  -67.64419  -66.59867  -66.149216 -66.10875 ]\n",
      "Action = 4 Qfun = [-66.42914 -67.6445  -66.59899 -66.14953 -66.109  ]\n",
      "Action = 4 Qfun = [-66.42856 -67.64392 -66.59842 -66.14896 -66.10853]\n",
      "Action = 4 Qfun = [-66.42949 -67.64486 -66.59933 -66.14987 -66.10929]\n",
      "Action = 4 Qfun = [-66.42873  -67.64409  -66.59859  -66.149124 -66.108665]\n",
      "Action = 4 Qfun = [-66.42947 -67.64482 -66.5993  -66.14983 -66.10925]\n",
      "Action = 4 Qfun = [-66.428986 -67.644356 -66.59884  -66.149376 -66.10887 ]\n",
      "Action = 4 Qfun = [-66.42895 -67.64432 -66.5988  -66.14934 -66.10886]\n",
      "Action = 4 Qfun = [-66.42924  -67.64459  -66.599075 -66.14961  -66.10907 ]\n",
      "Action = 4 Qfun = [-66.42886  -67.644226 -66.59872  -66.149254 -66.10878 ]\n",
      "Action = 4 Qfun = [-66.42884  -67.64421  -66.5987   -66.14925  -66.108765]\n",
      "Action = 4 Qfun = [-66.42871 -67.64407 -66.59857 -66.14911 -66.10865]\n",
      "Action = 4 Qfun = [-66.42894 -67.6443  -66.59879 -66.14932 -66.10883]\n",
      "Action = 4 Qfun = [-66.428894 -67.644264 -66.59875  -66.149284 -66.1088  ]\n",
      "Action = 4 Qfun = [-66.42909  -67.644455 -66.59894  -66.149475 -66.10896 ]\n",
      "Action = 4 Qfun = [-66.42881  -67.64417  -66.59867  -66.1492   -66.108734]\n",
      "Action = 4 Qfun = [-66.42916 -67.64452 -66.599   -66.14954 -66.10902]\n",
      "Action = 4 Qfun = [-66.42892  -67.64428  -66.59877  -66.14931  -66.108826]\n",
      "Action = 4 Qfun = [-66.42896  -67.64433  -66.59881  -66.14935  -66.108864]\n",
      "Action = 4 Qfun = [-66.428314 -67.643684 -66.59819  -66.14873  -66.108345]\n",
      "Action = 4 Qfun = [-66.42898  -67.64433  -66.59882  -66.14937  -66.108864]\n",
      "Action = 4 Qfun = [-66.42857  -67.643936 -66.59844  -66.14897  -66.108536]\n",
      "Action = 4 Qfun = [-66.42883  -67.644196 -66.59869  -66.14922  -66.10876 ]\n",
      "Action = 4 Qfun = [-66.42888 -67.64424 -66.59873 -66.14927 -66.10878]\n",
      "Action = 4 Qfun = [-66.42897  -67.64433  -66.598816 -66.14936  -66.10887 ]\n",
      "Action = 4 Qfun = [-66.428406 -67.64377  -66.598274 -66.14882  -66.10841 ]\n",
      "Action = 4 Qfun = [-66.42885  -67.64421  -66.5987   -66.14925  -66.108765]\n",
      "Action = 4 Qfun = [-66.4292  -67.64456 -66.59904 -66.14958 -66.10905]\n",
      "Action = 4 Qfun = [-66.4285  -67.64387 -66.59837 -66.14891 -66.10849]\n",
      "Action = 4 Qfun = [-66.42868  -67.64404  -66.59854  -66.14908  -66.108635]\n",
      "Action = 4 Qfun = [-66.42927  -67.64462  -66.599106 -66.14964  -66.1091  ]\n",
      "Action = 4 Qfun = [-66.428604 -67.64397  -66.59847  -66.149    -66.10858 ]\n",
      "Action = 4 Qfun = [-66.42885 -67.64421 -66.5987  -66.14925 -66.10877]\n",
      "Action = 4 Qfun = [-66.42881 -67.64418 -66.59867 -66.14921 -66.10875]\n",
      "Action = 4 Qfun = [-66.42862 -67.64399 -66.59849 -66.14903 -66.10859]\n",
      "Action = 4 Qfun = [-66.428345 -67.643715 -66.59823  -66.148766 -66.10837 ]\n",
      "Action = 4 Qfun = [-66.42876  -67.64413  -66.598625 -66.149155 -66.1087  ]\n",
      "Action = 4 Qfun = [-66.42915  -67.644516 -66.599    -66.14954  -66.10901 ]\n",
      "Action = 4 Qfun = [-66.42873  -67.64409  -66.59858  -66.14912  -66.108665]\n",
      "Action = 4 Qfun = [-66.42812  -67.64349  -66.59801  -66.148544 -66.108185]\n",
      "Action = 4 Qfun = [-66.42871 -67.64409 -66.59858 -66.14911 -66.10866]\n",
      "Action = 4 Qfun = [-66.428696 -67.644066 -66.598564 -66.14909  -66.10865 ]\n",
      "Action = 4 Qfun = [-66.42845  -67.64383  -66.59833  -66.148865 -66.10846 ]\n",
      "Action = 4 Qfun = [-66.42867  -67.64404  -66.59853  -66.14908  -66.108635]\n",
      "Action = 4 Qfun = [-66.42847 -67.64383 -66.59833 -66.14887 -66.10845]\n",
      "Action = 4 Qfun = [-66.42885 -67.64421 -66.5987  -66.14925 -66.10877]\n",
      "Action = 4 Qfun = [-66.428696 -67.64406  -66.59856  -66.14909  -66.108635]\n",
      "Action = 4 Qfun = [-66.42884  -67.64421  -66.598694 -66.14924  -66.108765]\n",
      "Action = 4 Qfun = [-66.42875 -67.64412 -66.59861 -66.14915 -66.10868]\n",
      "Action = 4 Qfun = [-66.42915  -67.644516 -66.599    -66.149536 -66.10902 ]\n",
      "Action = 4 Qfun = [-66.428635 -67.644005 -66.5985   -66.14903  -66.1086  ]\n",
      "Action = 4 Qfun = [-66.42853  -67.64389  -66.5984   -66.148926 -66.108505]\n",
      "Action = 4 Qfun = [-66.42866  -67.64403  -66.598526 -66.14906  -66.10862 ]\n",
      "Action = 4 Qfun = [-66.428604 -67.64397  -66.59847  -66.149    -66.10857 ]\n",
      "Action = 4 Qfun = [-66.42886  -67.644226 -66.59872  -66.149254 -66.108765]\n",
      "Action = 4 Qfun = [-66.428406 -67.643776 -66.598274 -66.14881  -66.10841 ]\n",
      "Action = 4 Qfun = [-66.428116 -67.643486 -66.59799  -66.14853  -66.10817 ]\n",
      "Action = 4 Qfun = [-66.42879  -67.64415  -66.59864  -66.149185 -66.10872 ]\n",
      "Action = 4 Qfun = [-66.428566 -67.64393  -66.59843  -66.14897  -66.108536]\n",
      "Action = 4 Qfun = [-66.42867 -67.64403 -66.59853 -66.14906 -66.10862]\n"
     ]
    }
   ],
   "source": [
    "max_episode_steps = 250\n",
    "\n",
    "env_vis = UnbalancedDisk(dt=0.025, render_mode=\"human\")\n",
    "env_vis = gym.wrappers.TimeLimit(env_vis,max_episode_steps=max_episode_steps)\n",
    "\n",
    "show(Q,env_vis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3acd27d1-6845-4eb2-9cc2-ee7bceb9aa03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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RQvTuHFjY4wxrVq1MvXr1zcXL170uJ08edLYbDYzevRo93bbtm0zPXr0MOXKlcv1fiYmJrr7tWvXzlSqVClXnf369TO1atXyaNuyZUu+bhkZGe5tfl/r5ebnXCkMTZ8+3ZQrV85jnkx+5wYZY8zLL7+cK2h27NjRSDKPPfaYR98PP/zQSDLz58/P176Nubb5LTkB9tVXX3W37du3z5QsWdJjfkt+wpDL5TL333+/CQwMNB9++GGux//2t7+Z0NBQ8+KLL5q1a9ea//znP6Zjx47G4XCYbdu2XXa/f/7zn02xYsXyDDJxcXGmePHiZs6cOebo0aPmu+++M82bNzeBgYFGkjvM5YShnPu/FRsba2rWrJnnsb15TXfu3GkkmSeeeCLXYxcuXDBdunQxUVFRZv78+earr74yb7/9trn11ltNo0aNzIkTJ9x9t27dasLDw02PHj3MRx99ZL744gszfvx4ExQUZF588cXLHn/v3r0mKirK3HbbbXkGLMAYY7iazEcuXLige+65Ry1atNCCBQu82vbDDz/Upk2bFBkZmefjgwcP1osvvui+//tz6DmndiZPnqy77rpLxhjt2LHDqxpuueUWTZkyxX1+/+2339af/vQnbd++3RLDzOXKlfO4HxQUpNDQ0FxzOIKCgpSZmSlJ+uWXX/S///3PPQ/i9zIyMiRdutqlTZs2qlmzpl577TVFR0erRIkS2rx5s5544olcp4zKly+fa1/BwcG5+jVo0CBfzy0wMND999/XunDhQj344IP52o906bk8//zzmjJlioKCgnTixAlJl07ZuVwunThxQsHBwVe8MmvgwIF6+umnlZiY6L7SKOc5d+rUyaNvp06dZLPZtG3btnzXeC169+6tsLAwJSYmutueeOIJ1atXT3fffbf7eZ45c0aSdOrUKTmdzlxzX8z/nVZ755133P+Hfis5OVnPP/+8pk2bpqefftrd3qVLF9WpU0ejRo3S2rVrc9WXkZGhFStWqFu3bqpUqVKux2fPni1jjB5//HENGTJEAQEBiouLU8WKFfXpp5+6X9+cP48ePZrrCsBjx47l+n9wLXJ+/v3+FFnOYytXrtSWLVvUpEkTSVKbNm3UunVr/eEPf9DMmTM1YcIESZde/4oVK2r58uXuf8N33nmnAgICNHHiRN13332qXr26x/7379+vO++8U8WKFdOaNWsK5Png5kQY8pEXXnhBkrRo0SKvtjt06JCGDh2qTz/9VN26dcuzT2hoaJ4/AKVLH0LDhw/X9OnT9fDDD7vba9as6dHvxx9/1NNPP62vvvpKYWFhio2N1YwZM+RwOCRJPXr08Og/adIkzZ49O9dlwfj/HA6HQkJC9NZbb132celS2D19+rQSEhJUtWpV9+NJSUnXdfzLhbDf+23g2bJli8dj1apV8+qYe/bs0dmzZzV8+HANHz481+Nly5bV8OHDNXPmzKvu67cTtuvXr59r3ZzL9fUVY4zHcXbu3Kn9+/d7XJae484775TdbneHpJztH3nkES1cuFALFizQwIEDc2333XffyRijpk2berQXL15ct99+u9atW5dnbYsXL9aFCxfyDBjSpUnEixcv1uuvv64DBw4oMjJSDodDtWrVUsuWLVWs2KUf/TExMZKkHTt2qE6dOu7ts7Ky9NNPP6l///6XeXXy58KFC1q8eLEaN26cZ1hPSkpSYGCgGjVq5NFevXp1lS9f3mPOUlJSkvr37+8R5iWpadOmcrlcSk5O9ghD+/fvV/v27WWM0Zdffqlbbrnlup4Lbm6EoULE5XIpLi5OzzzzzBUDx5IlS/TOO++4F2ebMGGCey2Obdu26dChQwoICFDDhg2Vnp6uBg0a6OWXX3bvMy0tTe3atdPgwYP16quv6uzZsxozZozuvffeXGutSJcmsb7//vs6ffq0WrRo4ZsnfxPo3r27Jk+erPLly18xVORckfPbCa7GGM2fP/+6jv/7YHM5v60t57fxa9WgQYM8Ry5GjBghp9OphQsXXvVD6O2335Yk3XHHHe623r1767nnntPKlSs91qVZuXKljDEefX3hgw8+0JkzZzyO89577+VatG/VqlWaOnWq5syZ4/F/1hijwYMHa+HChZo7d26uq7Vy5Iz+JiYmekyCPn/+vLZt23bZ127BggWKjIxUly5drvg8ypYt6w5vK1asUEpKiqZOnep+vHnz5oqIiNCiRYvUt29fj+d/6tQp9enT54r7v5oVK1YoIyPDYyT7tyIjI5Wdna0tW7aoefPm7vaff/5ZR48e9Xj+kZGR2rp1q7Kzsz0CUc6aRr/tm5qaqvbt2ys7O1tffvmlxy8dQF4IQ4XI1KlTVaxYMQ0bNuyyfe677z5Vq1ZNlSpV0s6dOzV27Fh99913Wr16taRLv6lLly4Rf/XVVxUdHa1XXnlF7dq1088//6xy5cpp9uzZatSokSZPnuze71tvvaWoqCj9/PPPuu222yRd+m2xRYsWOnfunPsy29/+9ghPI0aM0LJly9S2bVuNHDlS9evXl8vlUmpqqj777DM99dRTat68uTp27KigoCD1799fo0eP1rlz5zR79mwdP378uo5/vcHm97Zu3ap9+/ZJurRkgDFGH3zwgaRLv41XrVpVZcqUyXNl6jJlyigrK8vjsfXr12vSpEnq3bu3qlevrnPnzmnlypWaN2+e7rrrLo/RyFq1aumJJ57QrFmzVKpUKXXp0kU///yzxo8fr4YNG+ree+91933xxRf14osvas2aNR6BYuXKlTp9+rROnjwp6dJoaE79Xbt2VWhoqPbv368BAwaoX79+qlGjhmw2m9atW6eZM2eqbt26HiMveQWwnNencePGHq//sGHDtGDBAg0aNEgxMTEep9uCg4PVsGFDSVLr1q3VtGlTTZw4UWfOnFHbtm3ldDr1xhtvaO/evVq8eHGuY27atEk//PCDxo0bl2uUJMeyZct0+PBh1a5dW+fOndOXX36p1157TUOGDPE4VRcYGKhp06YpLi5Ojz32mPr3769du3Zp9OjR6tixY65FHvPzmv7WggULFBISogEDBuRZ50MPPaQZM2bo7rvv1vjx41WzZk3t2bNHkydPVlhYmIYMGeLuO3LkSA0bNkw9evTQY489ptDQUK1Zs0avvPKKOnTooNtvv12SdOTIEd15551KS0vTggULdOTIER05csS9n1tuuYVRIuTmp7lKRVLO5Nor3X4/kXLhwoX5mkC9detWU7FiRXPo0CF3W9WqVXNNoM5rO0nm22+/Ncb8/8XS5s6d6+5z7tw543A4zJw5c4wxxnTt2tUUL17chIWFedz0uyuezp8/b3bt2mW2bNlinn32WeNwOMwPP/xw1edSlOW8x7/++qtH++UW5vv9ROFTp06Z8ePHm5o1a5qgoCBjt9tNTEyMGTlypMck1Y8++sjcfvvtpkSJEqZy5crmmWeecV8dtHbt2svu/7f1VK1a9fqf8BU88MAD13xFWl5179q1y3Tt2tVUrlzZBAcHmxIlSpiYmBgzadIkc+7cuVz7yMrKMlOmTDE1atQwxYsXNxEREeYvf/mLOX78uEe/nPfst6+bMZf+/1yu/r179xpjjDl27Jjp3bu3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eH2a7O6779b58+fVuHFjtWvXTu3bt1erVq3ck6oBAChs9macdgehHNnGaF/GGU6XwfuRoePHj+vLL79Uz549tX37dt1zzz0qV66c7rjjDj377LO+qBEAgOtSzRGmgN+dwAi02RTtCPVPQShUrnvO0M6dO/Xyyy9ryZIlcrlcN90K1MwZAoCbw9ItqRqXsFPZxijQZtPkPvWYM3QT8+m31icnJ2vdunX68ssvtW7dOmVnZ6t169Z65ZVX1K5du2suGgAAX+rbtIra3lZB+zLOKNoRyukxuHk9MhQQEKAKFSpoxIgR6tmzp+rWreur2goFRoYAACh6fHo12bBhw1S5cmVNnDhRgwYN0pgxY7Ry5UqdOnXqmgsGAADwl2ueM3TixAmtX79e69at07p167Rjxw41aNBAiYmJBV2jXzEyBABA0ePTkaEcLpdLWVlZunDhgs6fP6+LFy9q375917o7AAAAv/A6DA0fPly33367wsPD9dhjj+nw4cN69NFH9d133yk9Pd0XNQIAAPiM11eTHTp0SIMHD1b79u1Vr149X9QEAABww3gdhj744ANf1AEAAOAX1zRnaPHixWrVqpUiIyO1f/9+SdLMmTP1n//8p0CLAwAA8DWvw9Ds2bM1atQode3aVSdOnHCvOF2mTBnNnDmzoOsDAADwKa/D0BtvvKH58+frueeeU2BgoLu9SZMm2rFjR4EWBwAA4Gteh6G9e/eqYcOGudqDg4N1+vTpAikKAADgRvE6DFWrVk1JSUm52leuXKk6deoURE0AAAA3jNdXkz3zzDN64okndO7cORljtHnzZv3rX/9SfHy83nzzTV/UCAAA4DNeh6GHHnpIWVlZGj16tM6cOaMBAwaocuXKeu2119SvXz9f1AgAAOAz1/zdZJKUkZEhl8ul8PBwSZcWZKxcuXKBFVcY8N1kAAAUPTfku8kkyeFwKDw8XOnp6XryySdVo0aN69kdAADADZfvMHTixAndd999qlChgiIjI/X666/L5XLp+eefV/Xq1ZWYmKi33nrLl7UCAAAUuHzPGRo3bpy++uorPfDAA1q1apVGjhypVatW6dy5c1q5cqXatWvnyzoBAAB8It9h6L///a8WLlyoDh066PHHH1eNGjV02223seo0AAAo0vJ9muzw4cPudYSqV6+uEiVK6JFHHvFZYQAAADdCvsOQy+VS8eLF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Bw/2d1mWdPLkSf31r3/V8uXLdeTIEUVGRqp///56/vnnFRQU5O/yiizCEAAAsDTmDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEoVNq3b68RI0b4uwwAFsKiiwAKlWPHjql48eIqVarUde/LZrNp+fLl6tWr1/UXBuCmxXeTAShUypUr5+8SAFgMp8kAFCq/PU0WHR2tyZMna9CgQSpVqpSqVKni8QWhFy5c0NChQxUREaESJUooOjpa8fHx7m0lqXfv3rLZbO77u3fv1p/+9CdVrFhRJUuWVNOmTfX555971HC140rSwYMH1a9fP5UrV05hYWFq0qSJNm3a5H78o48+UuPGjVWiRAlVr15dL7zwgrKysgr41QJQEAhDAAq1V155RU2aNNH27dv1+OOP6y9/+Yt++uknSdLrr7+uFStW6N///rdSUlL0zjvvuEPPli1bJF360t20tDT3/VOnTqlr1676/PPPtX37dnXq1Ek9evRQampqvo976tQptWvXTocPH9aKFSv03XffafTo0XK5XJKkTz/9VAMHDtSwYcP0448/au7cuVq0aJEmTZp0I14yAN4yAFCItGvXzgwfPtwYY0zVqlXNwIED3Y+5XC4THh5uZs+ebYwx5sknnzR33XWXcblcee5Lklm+fPlVj1mnTh3zxhtvuO9f7bhz5841pUqVMkePHs1zf23atDGTJ0/2aFu8eLGJiIi4ai0AbjzmDAEo1OrXr+/+u81mU6VKlXTkyBFJ0oMPPqiOHTuqZs2a6ty5s7p3767Y2Ngr7u/06dN64YUX9PHHH+vw4cPKysrS2bNnc40MXem4SUlJatiw4WXnN3377bfasmWLx0hQdna2zp07pzNnzig0NNS7FwGATxGGABRqxYsX97hvs9ncp6MaNWqkvXv3auXKlfr888917733qkOHDvrggw8uu79nnnlGn376qV5++WXVqFFDISEh+vOf/6wLFy7k+7ghISFXrNnlcumFF15Qnz59cj1WokSJK24L4MYjDAEo0kqXLq2+ffuqb9+++vOf/6zOnTvr2LFjKleunIoXL67s7GyP/uvXr9eDDz6o3r17S7o0/2ffvn1eHbN+/fp688033cf5vUaNGiklJUU1atS45ucF4MZhAjWAImvGjBl677339NNPP+nnn3/W+++/r0qVKqlMmTKSLl0VtmbNGqWnp+v48eOSpBo1aighIUFJSUn67rvvNGDAAPeIT371799flSpVUq9evfTNN99oz549WrZsmTZu3ChJev755/XPf/5TEydO1A8//KDk5GQtXbpU48ePL9DnD6BgEIYAFFklS5bU1KlT1aRJEzVt2lT79u3TJ598ooCASz/aXnnlFa1evVpRUVFq2LChpEsBqmzZsmrZsqV69OihTp06qVGjRl4dNygoSJ999pnCw8PVtWtXxcTEaMqUKQoMDJQkderUSR9//LFWr16tpk2b6o477tCrr76qqlWrFuwLAKBAsAI1AACwNEaGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApRGGAACApf0/JHq2a8fZ+iEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "Rewards = [eval_Q(Q,env_vis) for i in range(10)]\n",
    "plt.plot(Rewards,'.')\n",
    "plt.title(f'mean={np.mean(Rewards)}')\n",
    "plt.xlabel('instance')\n",
    "plt.ylabel('Reward per episode')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "224a2601-47e9-47ba-8482-b6a63c99eafd",
   "metadata": {},
   "source": [
    "pip install stable-baselines3[extra] gymnasium pygame\n",
    "\n",
    "#Register the Environment\n",
    "from gymnasium.envs.registration import register\n",
    "\n",
    "register(\n",
    "    id='UnbalancedDisk-v0',\n",
    "    entry_point='unbalanced_disk:UnbalancedDisk',  # adjust this to your import path\n",
    ")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "354ebeaf-88ff-41ff-ac72-809d38ea2712",
   "metadata": {},
   "source": [
    "pip install stable-baselines3[extra] gymnasium pygame\n",
    "\n",
    "#Register the Environment\n",
    "from gymnasium.envs.registration import register\n",
    "\n",
    "register(\n",
    "    id='UnbalancedDisk-v0',\n",
    "    entry_point='unbalanced_disk:UnbalancedDisk',  # adjust this to your import path\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
